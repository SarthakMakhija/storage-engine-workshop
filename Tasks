1. Implement memtable with get and put
   done
2. Provide support for multiget
   done
3. Basic implementation of WAL without segments
   done
4. Allow page aligned writes in WAL without segments
   NA
5. Implement page aligned reads in WAL
   NA
6. Implement flushing in WAL
   pending
7. Implement segments in WAL
   done
8. Implement marker in WAL
   pending
9. Implement SSTable (convert MemTable to SSTable)
   done
10. Convert memtable to SSTable when the size of memtable has reached its limit
   done
11. Implement flushing in SSTable
   done
12. Implement read from SSTable
   done
13. Implement a bloom filter without reference to SSTable
   done
14. Implement bloom filter with reference to SSTable
   done
15. Implement a get & multiGet in SSTable that uses index block to read a key
   done
16. Implement end to end put and get the involves - memtable/bloom filter and SSTable (via test)
   done
17. Implement transactions
   pending
18. Implement concurrency
   done
19. Implement update using versioned put
   pending
20. Write benchmarks
   pending
21. Re-look at closing the file
   pending
22. Establish the relationship between SSTable and bloom filter on restart
   pending
23. Make PersistentSlice specific to WAL
   done
24. Introduce new persistent slice like abstraction for SSTable encoded key/value
   done

Questions
1. Do we need page aligned writes for WAL?
No
2. Instead, can we implement page aligned reads for WAL?
Not needed
3. What if the size of persistent slice is more than page size in WAL?
NA


1) All developers
Add archetypes .. this will be needed before the workshop goes on Campus

1. Put B+Tree somewhere !!!
    - with code
    - focussing on how these data structures map on disk

Day1 - 3 hours
    What is storage engine?
    Forms of IO
        - standard IO
        - concept of page
        - memory mapping
    Read and write patterns
        - Sequential
        - Random
    Data structures for storage engine
        - B+Tree
        - LSM Tree
    RUM conjecture
    Let's build LSM Tree
        - WAL log (code)
        - Adding segments (code)
    Introducing Skip-list

Day2 - 3 hours
    Revision
    Introducing Memtable
    Building Memtable (code)
        - put
        - get
        - multiGet
    Introducing SSTable
    Converting Memtable to SSTable (code)
    Introducing Bloom filter
        - Writing a bloom filter (code)
        - Attaching bloom filter to an SSTable (code)

Day3 - 4 hours
    Revision
    Searching in SSTable (code)
        - Bloom filter revision
        - Adding an index block to SSTable
    Implementing Concurrency (code)
        - Understanding single writer and multiple reader pattern
        - Singular update queue pattern
    Adding a Db abstraction to connect all the pieces (code)
        - WAL
        - Memtable
        - Bloom filter
        - SSTable
    Implementing transactions (code) / (theory depending on the time left)
    How to measure performance (code)
        - Benchmark
        - google performance profiler
        - perf (Linux)
    Conclusion??
        - postgres
        - rocks
        - redis





db(put)
 1) single writer / multiple reader
 2) singular update queue

 -> WAL
        -> memtable if space is available
        else,
            new memtable
            and a goroutine memtable - sstable









